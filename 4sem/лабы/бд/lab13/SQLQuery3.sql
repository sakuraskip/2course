	use S_MyBase3
	go

	create procedure P_Ответственные
	as
	begin
		declare @count int = (select count(*) from Ответственные);
		select * from Ответственные;
		return @count;
	end;
	go

	declare @k int;
	exec @k = P_Ответственные;
	print 'Количество ответственных: ' + cast(@k as varchar);
	go

	create procedure P_Ответственные_INSERT
		@номер int,
		@фамилия nvarchar(50),
		@имя nvarchar(50),
		@отчество nvarchar(50),
		@должность nvarchar(50),
		@дата_приема date
	as
	begin
		begin try
			insert into Ответственные ([Номер ответственного], [Фамилия ответственного], 
									  [Имя ответственного], [Отчество ответственного], 
									  Должность, [Дата приема на работу])
			values (@номер, @фамилия, @имя, @отчество, @должность, @дата_приема);
			return 1;
		end try
		begin catch
			print 'Ошибка: ' + error_message();
			return -1;
		end catch;
	end;
	go

	declare @result int;
	exec @result = P_Ответственные_INSERT 
		@номер = 1, 
		@фамилия = 'Иванов', 
		@имя = 'Иван', 
		@отчество = 'Иванович',
		@должность = 'Инженер',
		@дата_приема = '2020-01-15';
	print 'Результат: ' + cast(@result as varchar);
	go

	create procedure P_Списание_INSERT
		@номер_списания int,
		@название_оборудования nvarchar(50),
		@количество int,
		@причина nvarchar(50),
		@дата_списания date,
		@номер_ответственного int
	as
	begin
		begin try
			if not exists (select 1 from Оборудование where [Название оборудования] = @название_оборудования)
				raiserror('Оборудование не найдено', 16, 1);
        
			if not exists (select 1 from Ответственные where [Номер ответственного] = @номер_ответственного)
				raiserror('Ответственный не найден', 16, 1);
        
			declare @доступное_количество int;
			select @доступное_количество = [Количество оборудования] 
			from Оборудование 
			where [Название оборудования] = @название_оборудования;
        
			if @количество > @доступное_количество
				raiserror('Недостаточно оборудования для списания', 16, 1);
        
			update Оборудование
			set [Количество оборудования] = [Количество оборудования] - @количество
			where [Название оборудования] = @название_оборудования;
        
			insert into Списания ([Номер списания], [Название оборудования], 
								 [Количество списанного оборудования], [Причина списания], 
								 [Дата списания], [Номер ответственного])
			values (@номер_списания, @название_оборудования, @количество, 
					@причина, @дата_списания, @номер_ответственного);
        
			return 1;
		end try
		begin catch
			print 'Ошибка: ' + error_message();
			return -1;
		end catch;
	end;
	go

	declare @result int;
	exec @result = P_Списание_INSERT
		@номер_списания = 1,
		@название_оборудования = 'Станок Dell',
		@количество = 2,
		@причина = 'Устарело',
		@дата_списания = '2023-06-15',
		@номер_ответственного = 1;
	print 'Результат: ' + cast(@result as varchar);
	go

	CREATE PROCEDURE P_Списания_С_Курсором
    @начальная_дата date = NULL,
    @конечная_дата date = NULL
AS
BEGIN
    DECLARE @result_text varchar(MAX) = 'Отчет о списаниях:' + CHAR(13) + CHAR(10);
    DECLARE @count int = 0;
    
    -- Объявляем переменные для курсора
    DECLARE @номер_списания int, @название_оборудования nvarchar(50),
            @количество int, @причина nvarchar(50), @дата_списания date,
            @номер_ответственного int, @фио_ответственного varchar(100);
    
    -- Создаем курсор с динамическим условием
    DECLARE списания_курсор CURSOR FOR
        SELECT s.[Номер списания], s.[Название оборудования], 
               s.[Количество списанного оборудования], s.[Причина списания],
               s.[Дата списания], s.[Номер ответственного],
               o.[Фамилия ответственного] + ' ' + LEFT(o.[Имя ответственного], 1) + '.' + 
               CASE WHEN o.[Отчество ответственного] IS NOT NULL 
                    THEN LEFT(o.[Отчество ответственного], 1) + '.' ELSE '' END
        FROM Списания s
        JOIN Ответственные o ON s.[Номер ответственного] = o.[Номер ответственного]
        WHERE (@начальная_дата IS NULL OR s.[Дата списания] >= @начальная_дата)
          AND (@конечная_дата IS NULL OR s.[Дата списания] <= @конечная_дата)
        ORDER BY s.[Дата списания] DESC;
    
    OPEN списания_курсор;
    FETCH NEXT FROM списания_курсор INTO @номер_списания, @название_оборудования, 
                                        @количество, @причина, @дата_списания,
                                        @номер_ответственного, @фио_ответственного;
    
    WHILE @@FETCH_STATUS = 0
    BEGIN
        SET @count = @count + 1;
        SET @result_text = @result_text + 
            'Списание №' + CAST(@номер_списания AS varchar) + CHAR(13) + CHAR(10) +
            'Оборудование: ' + @название_оборудования + CHAR(13) + CHAR(10) +
            'Количество: ' + CAST(@количество AS varchar) + CHAR(13) + CHAR(10) +
            'Причина: ' + @причина + CHAR(13) + CHAR(10) +
            'Дата: ' + CONVERT(varchar, @дата_списания, 104) + CHAR(13) + CHAR(10) +
            'Ответственный: ' + @фио_ответственного + ' (№' + 
            CAST(@номер_ответственного AS varchar) + ')' + CHAR(13) + CHAR(10) +
            '----------------------------------------' + CHAR(13) + CHAR(10);
        
        FETCH NEXT FROM списания_курсор INTO @номер_списания, @название_оборудования, 
                                            @количество, @причина, @дата_списания,
                                            @номер_ответственного, @фио_ответственного;
    END;
    
    CLOSE списания_курсор;
    DEALLOCATE списания_курсор;
    
    IF @count = 0
        SET @result_text = @result_text + 'Нет данных за указанный период';
    ELSE
        SET @result_text = @result_text + 'Всего записей: ' + CAST(@count AS varchar);
    
    PRINT @result_text;
    RETURN @count;
END;
GO

	create procedure P_Добавить_и_Списать_Оборудование
		@название_оборудования nvarchar(50),
		@тип nvarchar(50),
		@количество_поступило int,
		@дата_поступления nvarchar(50),
		@подразделение nvarchar(50),
		@количество_списать int,
		@причина_списания nvarchar(50),
		@дата_списания date,
		@номер_ответственного int
	as
	begin
		begin try
			set transaction isolation level serializable;
			begin transaction;
        
			insert into Оборудование ([Название оборудования], [Тип оборудования], 
									[Количество оборудования], [Дата поступления], 
									[Подразделение установки])
			values (@название_оборудования, @тип, @количество_поступило, 
					@дата_поступления, @подразделение);
        
			if @количество_списать > @количество_поступило
			begin
				raiserror('кол-во списать > кол-во поступить', 
						16, 1, @количество_списать, @количество_поступило);
			end
        
			update Оборудование
			set [Количество оборудования] = [Количество оборудования] - @количество_списать
			where [Название оборудования] = @название_оборудования;
        
			declare @номер_списания int;
			select @номер_списания = isnull(max([Номер списания]), 0) + 1 from Списания;
        
			insert into Списания ([Номер списания], [Название оборудования], 
								[Количество списанного оборудования], [Причина списания], 
								[Дата списания], [Номер ответственного])
			values (@номер_списания, @название_оборудования, @количество_списать, 
					@причина_списания, @дата_списания, @номер_ответственного);
        
			commit transaction;
        
			print 'оборудование добавлено и частично списано';
			return 1;
		end try
		begin catch
			if @@TRANCOUNT > 0
				rollback transaction;
        
			print 'ошибка при выполнении операции: ' + error_message();
			print 'Код ошибки: ' + cast(error_number() as varchar);
			print 'Строка: ' + cast(error_line() as varchar);
        
			return -1;
		end catch;
	end;
	go

	declare @результат int;

	exec @результат = P_Добавить_и_Списать_Оборудование
		@название_оборудования = 'Станок HP EliteBook',
		@тип = 'Станковое оборудование',
		@количество_поступило = 10,
		@дата_поступления = '2023-11-20',
		@подразделение = 'Бухгалтерия',
		@количество_списать = 2,
		@причина_списания = 'Бракованные при поставке',
		@дата_списания = '2023-11-21',
		@номер_ответственного = 1;

	print 'Результат выполнения: ' + cast(@результат as varchar);